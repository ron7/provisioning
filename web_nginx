#!/usr/bin/env bash
# options:
quiet=1

# env:
PHP_VER=$(dpkg -l|grep php|grep fpm|awk '{print $2}'|sort -n|tail -1|sed "s/php//; s/-fpm//")
if [ -z $PHP_VER ];then
  PHP_VER=7.4
fi

if ! nginx -v 2>/dev/null;then echo -e "\n::: nginx missing, aborting\n\n";exit 1;fi
if ! php-fpm${PHP_VER} -v 1>/dev/null;then echo -e "\n::: php missing, aborting\n\n";exit 1;fi

function servicesReload {
  if [ "$1" != "-q" ]; then
    echo :: Reloading services:
    echo "   - service nginx reload"
    echo "   - service php${PHP_VER}-fpm reload"
  fi
  service nginx reload
  service php${PHP_VER}-fpm reload
}
function logger {
  if [ "$quiet" == "1" ] ;then
    echo -n ''
  else
    echo -e "$1"
  fi
}
if [ "$1" == "-d" ]; then
  if [ "$3" != "" ] ; then
    user=$3
    logger "Disabling domain symlink in Nginx: $2"
    rm -rf /etc/nginx/sites-enabled/$2.conf
    logger "Removing from PHP pool"
    rm -rf /etc/php/${PHP_VER}/fpm/pool.d/$user.conf
    servicesReload -q
    logger "Deleting user [and group]: $user"
    userdel -f $user 2>/dev/null
    echo ":: home folder can be purged via: rm -rf /home/$user"
  else
    echo Usage: $0 -d domain.com user
  fi
elif [ -n "$2" ]; then
  currentpath=`pwd`
  groupadd -f $2
  useradd -s /bin/false -d /home/$2 -m -g $2 $2
  if [ "$3" != "" ];then
    webroot=$3
    chown -R $2.$2 $webroot
  else
    webroot=/home/$2/www
    mkdir -p /home/$2/www
    mkdir -p /home/$2/dev
    touch /home/$2/www/index.php
    touch /home/$2/dev/index.php
    chmod 751 $webroot /home/$2/dev
    chown -R $2.$2 /home/$2/*
  fi


  id=`id $2 -u`
  mkdir -p /etc/nginx/sites-enabled/;mkdir -p /etc/nginx/sites-available/
  logger "Creating Nginx config file: /etc/nginx/sites-available/$1.conf"
  echo webroot: $webroot
  cat > /etc/nginx/sites-available/$1.conf <<ENDD
#limit_req_zone \$binary_remote_addr zone=one:10m rate=20r/m;
#limit_rate 300K; limit_conn_zone \$binary_remote_addr zone=two:4m;
server {
    server_name  www.$1;
    rewrite ^(.*) http://$1\$1 permanent;
  }
server {

  listen 80;
  server_name $1;
  root $webroot;

     ## forcing SSL:
     ##set \$check_ssl_prot "\${ssl_protocol}P";
     ##if (\$check_ssl_prot = "P") { rewrite ^   https://\$server_name\$request_uri? permanent; }

     ## Enable SSL
#    listen 443 ssl http2;
#    ssl_certificate /home/$2/$1.pem;
#    ssl_certificate_key /home/$2/$1.key;
#    ssl_session_cache shared:SSL:1m;
#    ssl_session_timeout  10m;
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_prefer_server_ciphers on;
#    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
#    ssl_ecdh_curve secp384r1;
#    ssl_session_tickets on;
#    ssl_stapling on;
#    ssl_stapling_verify on;
#    resolver 1.1.1.1 8.8.8.8 valid=300s;
#    resolver_timeout 5s;

  access_log /var/log/nginx/$1_access.log;
  error_log /var/log/nginx/$1_error.log;
  index index.php index.html;

# include include_cache.conf;
  include include_standard_errors.conf;

  if (\$request_method !~ ^(GET|HEAD|POST|PUT|PATCH|DELETE)$ ) { return 444;  }

#generated by https://www.cspisawesome.com/content_security_policies
add_header Content-Security-Policy "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";
add_header X-Content-Security-Policy "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";
add_header X-WebKit-CSP "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";

#HSTS
#add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

# https://infosec.mozilla.org/guidelines/web_security#x-content-type-options
add_header X-Content-Type-Options "nosniff";
# Block site from being framed with X-Frame-Options and CSP
#add_header Content-Security-Policy "frame-ancestors 'none'";
add_header 'X-Frame-Options' "SAMEORIGIN";
# Block pages from loading when they detect reflected XSS attacks
add_header X-XSS-Protection "1; mode=block";

## Enable below block for WP Security, and whitelist/allow your Management IPs
#   location ~* ^/(?:wp-json|xmlrpc.php|wp-login.php|wp-admin|readme.html|feed\\/).*$ {
#
#    allow 127.0.0.1/32;
#    allow 10.10.10.0/24;
#    deny all;
#
#    include fastcgi_params;
#    fastcgi_intercept_errors on;
#    fastcgi_param USER  $2;
#    fastcgi_pass   unix:/var/run/php-fpm_$2.sock;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
#
#    #return 403;
#    root /home/$2/www;
#
#    index index.php index.html;
#    try_files \$uri \$uri/ /index.php\$is_args\$args;
#  }
#  # Deny access to any files with a .php extension in the uploads directory. Works in sub-directory installs and also in multisite network
#  location ~* ^/(?:uploads|files|wp-content|wp-includes)/.*\\.php\\$ { deny all; }
#
#  # Deny access to uploads that arenâ€™t images, videos, music, etc.
#  location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php|js|swf|css)$ { deny all; }

    location = /favicon.ico { try_files /favicon.ico =204; access_log off; log_not_found off; expires max; }
    location = /favicon.png { try_files /favicon.png =204; access_log off; log_not_found off; expires max; }
    location ~* ^/(?:README|LICENSE[^.]*|LEGALNOTICE)(?:\\.txt)*$ {  return 444;  }
    location = /robots.txt { expires max; }
    location ~ /.well-known { allow all; }
    location ~ /\\. { deny  all; }

    location ~* \\.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|bz2|tar|mid|midi|wav|bmp|rtf|zip)$ {

    # valid_referers server_names; # enable these two lines for hotlinking, but test as some resources will stop loading
    # if (\$invalid_referer)  { return 444; }

    add_header 'Cache-Control' "public, max-age=31536000";
    add_header 'X-Frame-Options' "SAMEORIGIN";
    add_header 'Access-Control-Allow-Origin' "*" always;
    expires    max;
    #access_log off;
    break;
    #try_files \$uri \$uri/ /index.php\$is_args\$args;
  }

  location ~* \\.(zip|gz|gzip|bz2|tar|csv|xml|mid|midi|wav|bmp|rtf)$ {
    add_header 'Cache-Control' "no-store";
    add_header 'Cache-Control' "max-age=0";
    add_header 'X-Frame-Options' "SAMEORIGIN";
    expires    off;
    break;
    #try_files \$uri \$uri/ /index.php\$is_args\$args;
  }

    location / {
    add_header 'Cache-Control' "public, max-age=31536000";
    add_header 'Access-Control-Allow-Origin' "*" always;
    if (\$args ~ "^author=\\d") { return 444; }
    index index.php index.html;
    #try_files \$uri \$uri/ /index.php?q=\$uri;
    try_files \$uri \$uri/ /index.php\$is_args\$args;

#   limit_req zone=one burst=5 nodelay;
#   limit_conn two 1;
}


  location ~ \.php$ {
  fastcgi_connect_timeout 60;
  fastcgi_send_timeout 180;
#  fastcgi_read_timeout 180;
#  fastcgi_cache_key \$host\$request_uri;
  fastcgi_buffer_size 128k;
  fastcgi_buffers 4 256k;
  fastcgi_busy_buffers_size 256k;
  fastcgi_temp_file_write_size 256k;
  fastcgi_intercept_errors on;
  fastcgi_pass   unix:/var/run/php-fpm_$2.sock;
  fastcgi_index  index.php;
  fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
#  fastcgi_param  SCRIPT_FILENAME  \$fastcgi_script_name;
  fastcgi_param  SCRIPT_NAME  \$fastcgi_script_name;
  include fastcgi_params;
  fastcgi_param USER  $2;
  fastcgi_read_timeout 1800;

#          limit_req zone=one burst=5 nodelay;
#          limit_conn two 1;
}
}

### Dev subdomain:
server {
  listen 80;
  server_name dev.$1;
  root /home/$2/dev;

     ## forcing SSL:
     ##set \$check_ssl_prot "\${ssl_protocol}P";
     ##if (\$check_ssl_prot = "P") { rewrite ^   https://\$server_name\$request_uri? permanent; }

     ## Enable SSL
#    listen 443 ssl http2;
#    ssl_certificate /home/$2/dev.$1.pem;
#    ssl_certificate_key /home/$2/dev.$1.key;
#    ssl_session_cache shared:SSL:1m;
#    ssl_session_timeout  10m;
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_prefer_server_ciphers on;
#    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
#    ssl_ecdh_curve secp384r1;
#    ssl_session_tickets on;
#    ssl_stapling on;
#    ssl_stapling_verify on;
#    resolver 1.1.1.1 8.8.8.8 valid=300s;
#    resolver_timeout 5s;

  access_log /var/log/nginx/dev.$1_access.log;
  error_log /var/log/nginx/dev.$1_error.log;
  index index.php index.html;
  include include_standard_errors.conf;

  if (\$request_method !~ ^(GET|HEAD|POST|PUT|PATCH|DELETE)$ ) { return 444;  }

#generated by https://www.cspisawesome.com/content_security_policies
add_header Content-Security-Policy "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";
add_header X-Content-Security-Policy "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";
add_header X-WebKit-CSP "default-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; script-src 'self' data: 'unsafe-inline' 'unsafe-hashes' 'unsafe-eval' https://*.$1 https://$1 https://*.googleapis.com https://google.com https://www.google-analytics.com https://*.google.com https://*.gstatic.com; style-src * 'self' data: 'unsafe-inline' 'unsafe-hashes' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; img-src * 'self' data: https://*.googleapis.com https://www.google-analytics.com https://*.google.com; font-src * 'self' data:; media-src * 'self' https://*.googleapis.com https://www.google-analytics.com https://*.google.com; object-src 'self' data:; prefetch-src 'self'; frame-src * data:; frame-ancestors 'self'; form-action *";

#HSTS
#add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

# https://infosec.mozilla.org/guidelines/web_security#x-content-type-options
add_header X-Content-Type-Options "nosniff";
# Block site from being framed with X-Frame-Options and CSP
#add_header Content-Security-Policy "frame-ancestors 'none'";
add_header 'X-Frame-Options' "SAMEORIGIN";
# Block pages from loading when they detect reflected XSS attacks
add_header X-XSS-Protection "1; mode=block";

## Enable below block for WP Security, and whitelist/allow your Management IPs
#   location ~* ^/(?:wp-json|xmlrpc.php|wp-login.php|wp-admin|readme.html|wp-includes|feed\\/).*$ {
#
#    allow 127.0.0.1/32;
#    allow 10.10.10.0/24;
#    deny all;
#
#    include fastcgi_params;
#    fastcgi_intercept_errors on;
#    fastcgi_param USER  $2;
#    fastcgi_pass   unix:/var/run/php-fpm_$2.sock;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
#
#    #return 403;
#    root /home/$2/www;
#
#    index index.php index.html;
#    try_files \$uri \$uri/ /index.php\$is_args\$args;
#  }
#  # Deny access to any files with a .php extension in the uploads directory. Works in sub-directory installs and also in multisite network
#  location ~* ^/(?:uploads|files|wp-content|wp-includes)/.*\\.php\\$ { deny all; }
#
#  # Deny access to uploads that arenâ€™t images, videos, music, etc.
#  location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php|js|swf|css)$ { deny all; }

    location = /favicon.ico { try_files /favicon.ico =204; access_log off; log_not_found off; expires max; }
    location = /favicon.png { try_files /favicon.png =204; access_log off; log_not_found off; expires max; }
    location ~* ^/(?:README|LICENSE[^.]*|LEGALNOTICE)(?:\\.txt)*$ {  return 444;  }
    location = /robots.txt { expires max; }
    location ~ /.well-known { allow all; }
    location ~ /\\. { deny  all; }


    location ~* \\.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2|bz2|tar|mid|midi|wav|bmp|rtf|zip)$ {

    # valid_referers server_names; # enable these two lines for hotlinking, but test as some resources will stop loading
    # if (\$invalid_referer)  { return 444; }

    add_header 'Cache-Control' "public, max-age=31536000";
    add_header 'X-Frame-Options' "SAMEORIGIN";
    add_header 'Access-Control-Allow-Origin' "*" always;
    expires    max;
    #access_log off;
    break;
    #try_files \$uri \$uri/ /index.php\$is_args\$args;
  }

  location ~* \\.(zip|gz|gzip|bz2|tar|csv|xml|mid|midi|wav|bmp|rtf)$ {
    add_header 'Cache-Control' "no-store";
    add_header 'Cache-Control' "max-age=0";
    add_header 'X-Frame-Options' "SAMEORIGIN";
    expires    off;
    break;
    #try_files \$uri \$uri/ /index.php\$is_args\$args;
  }

  location / {
    add_header 'Cache-Control' "public, max-age=31536000";
    add_header 'Access-Control-Allow-Origin' "*" always;
    if (\$args ~ "^author=\\d") { return 444; }

    index index.php index.html;
    #try_files \$uri \$uri/ /index.php?q=\$uri;
    try_files \$uri \$uri/ /index.php\$is_args\$args;
  }

      location ~ \.php$ {
      fastcgi_cache_key \$host\$request_uri;
      fastcgi_pass   unix:/var/run/php-fpm_$2.sock;
      fastcgi_index  index.php;
      fastcgi_param  SCRIPT_FILENAME  \$document_root\$fastcgi_script_name;
    #  fastcgi_param  SCRIPT_FILENAME  \$fastcgi_script_name;
      fastcgi_param  SCRIPT_NAME  \$fastcgi_script_name;
      include fastcgi_params;
      fastcgi_param USER  $2;
      fastcgi_read_timeout 600;
    }
}

ENDD


if [[ $varnish -eq 1 ]];then

  if [[ `varnishd -V` ]];then

    cat > /etc/varnish/default.vcl <<ENDD
vcl 4.0;
backend default {
        .host = "localhost";
        .port = "8080";
      }
#Allow cache-purging requests only from localhost using the acl directive:
acl purger {
        "localhost";
#"203.0.113.100";
}

sub vcl_recv {
#Redirect HTTP requests to HTTPS for our SSL website:
#       if (client.ip != "127.0.0.1" && req.http.host ~ "test.digitalcopy.pro") { set req.http.x-redir = "https://test.digitalcopy.pro" + req.url; return(synth(850, "")); }

        if (req.method == "PURGE") {
                if (!client.ip ~ purger) {
                        return(synth(405, "This IP is not allowed to send PURGE requests."));
                      }
                return (purge);
              }

        if (req.restarts == 0) {
                if (req.http.X-Forwarded-For) {
                        set req.http.X-Forwarded-For = client.ip;
                      }
                  }
#Exclude POST requests or those with basic authentication from caching:
        if (req.http.Authorization || req.method == "POST") {
                return (pass);
              }
#Exclude RSS feeds from caching:
        if (req.url ~ "/feed") {
                return (pass);
              }
#Tell Varnish not to cache the WordPress admin and login pages:
        if (req.url ~ "wp-admin|wp-login") {
                return (pass);
              }
#WordPress sets many cookies that are safe to ignore. To remove them, add the following lines:
        set req.http.cookie = regsuball(req.http.cookie, "wp-settings-\d+=[^;]+(; )?", "");
        set req.http.cookie = regsuball(req.http.cookie, "wp-settings-time-\d+=[^;]+(; )?", "");
        if (req.http.cookie == "") {
                unset req.http.cookie;
              }

          }

#Redirect HTTP to HTTPS using the sub vcl_synth directive with the following settings:
sub vcl_synth {
        if (resp.status == 850) {
                set resp.http.Location = req.http.x-redir;
                set resp.status = 302;
                return (deliver);
              }
          }
#Cache-purging for a particular page must occur each time we make edits to that page
sub vcl_purge {
        set req.method = "GET";
        set req.http.X-Purger = "Purged";
        return (restart);
      }

#The sub vcl_backend_response directive is used to handle communication with the backend server, NGINX. We use it to set the amount of time the content remains in the cache. We can also set a grace period, which determines how Varnish will serve content from the cache even if the backend server is down. Time can be set in seconds (s), minutes (m), hours (h) or days (d). Here, we've set the caching time to 24 hours, and the grace period to 1 hour, but you can adjust these settings based on your needs:
sub vcl_backend_response {
        set beresp.ttl = 24h;
        set beresp.grace = 1h;
#allow cookies to be set only if you are on admin pages or WooCommerce-specific pages:
        if (bereq.url !~ "wp-admin|wp-login|product|cart|checkout|my-account|/?remove_item=") {
                unset beresp.http.set-cookie;
              }
          }
#Change the headers for purge requests by adding the sub vcl_deliver directive:
sub vcl_deliver {
        if (req.http.X-Purger) {
                set resp.http.X-Purger = req.http.X-Purger;
              }
          }

ENDD

else
  logger "\n::: Varnish NOT installed\n"
fi

fi

logger "Creating Nginx links"
cd /etc/nginx/sites-enabled/
ln -fs ../sites-available/$1.conf $1.conf
cd $currentpath
logger "Adding pool to php-fpm"
mkdir -p /etc/php/${PHP_VER}/fpm/pool.d/
cat > /etc/php/${PHP_VER}/fpm/pool.d/$2.conf <<ENDD
[$2]
listen.owner = $2
listen.group = $2
listen.mode = 0666
listen.backlog = 65535
listen = /var/run/php-fpm_$2.sock
user = $2
group = $2
pm = dynamic
pm.max_children = 5
pm.start_servers = 1
pm.min_spare_servers = 1
pm.max_spare_servers = 2
;pm.max_requests = 500
php_admin_value[cgi.fix_pathinfo] = 0;
ENDD
if  [[ -z `grep "SCRIPT_FILENAME" /etc/nginx/fastcgi_params`  ]];then sed -i '/SCRIPT_NAME/i fastcgi_param  SCRIPT_FILENAME    \$document_root\$fastcgi_script_name;' /etc/nginx/fastcgi_params ;fi

servicesReload -q

else
  echo Usage: $0 domain.com username [webroot]
fi
