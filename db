#!/usr/bin/env bash
# vi: et st=2 sts=2 ts=2 sw=2 cindent bg=dark ft=bash
nc="\e[00m"
bold="\e[1;37m"
gray="\e[2;37m"
red="\e[1;31m"
green="\e[1;32m"
yellow="\e[1;33m"
pink="\e[1;35m"
me="$(basename $0)"

# Generate a random password
#  $1 = number of characters; defaults to 32
#  $2 = include special characters; 1 = yes, 0 = no; defaults to 1

function usage {
  echo -e "
  Usage:
  $me -l
  ${red}$me -d {dbname_to_delete} [ -U {DBUser_to_delete} ]${nc}
  $me -c {DBName_to_create} [ -u DBUser_to_create [ -p DBUser_password | ${yellow}if not provided random pass will be generated${nc} ] ]

  Available parameters:

  -l = ${yellow}FLAG${nc} list databases
  -L = ${yellow}FLAG${nc} list databases extended with users with permissions per DB
  -c = DB to create
  -u = DBUser to create
  -p = DBUser password to set
  -D = DB to delete
  -U = DB User to delete

  "
  exit 0
}

while getopts ":D:U:c:u:p:lL" flag
do
  case "${flag}" in
    D) delete_db="${OPTARG}";;
    U) delete_user="${OPTARG}";;
    c) create_db="${OPTARG}";;
    u) create_user="${OPTARG}";;
    p) create_pass="${OPTARG}";;
    l) list_dbs=1;;
    L) list_dbs_extended=1;;
    x) set -x;;
    :) echo "Error: -${OPTARG} requires an argument." && exit 1;;
    *) usage;;
  esac
done

test -z "$1" && usage

function randpass() {
  [ "$2" == "0" ] && CHAR="[:alnum:]" || CHAR="[:graph:]" || CHAR="#"
  cat /dev/urandom | tr -cd "$CHAR" | head -c ${1:-32}
  echo
}

if [ -n "$list_dbs" ];then
  get_dbs="$(mysql -ABNe 'show databases'|grep -vE "^(information_schema|mysql|performance_schema)$")"
  echo "$get_dbs"
  exit 0
fi
if [ -n "$list_dbs_extended" ];then
  #user_grants="$(mysql -ABNe 'select Host,User from user' -D mysql|while read -r h u;do mysql -ABNe "show grants for '$u'@'$h'";done|grep -v ' IDENTIFIED BY PASSWORD ')"
  user_grants="$(mysql -ABNe 'select Host,User from user' -D mysql|while read -r h u;do mysql -ABNe "show grants for '$u'@'$h'";done|grep -vP 'GRANT USAGE ON.* IDENTIFIED BY PASSWORD ')"

  get_dbs="$(mysql -ABNe 'show databases'|grep -vE "^(information_schema|mysql|performance_schema)$")"
  for db in $get_dbs;do
    show_user_grants=''
    #db_user_grants="$(echo "$user_grants"|grep "\`${db}\`\."|grep -oP " TO \K.*"|sed 's/`//g'|sort -u|xargs)"
    db_user_grants="$(echo "$user_grants"|grep -E "\`${db}\`\.|\*\.\*"|grep -oP " TO \K\S+"|sed 's/`//g'|sort -u|xargs)"
    test -n "$db_user_grants" && show_user_grants=" ${yellow} Users: (${db_user_grants})${nc}"
    echo -e "$db $show_user_grants"
  done
  exit 0
fi

if [ -n "$delete_db" ];then
  echo Deleting dbname: $delete_db
  mysql -e "DROP DATABASE IF EXISTS $delete_db"
  # exit 0
fi

if [ -n "$delete_user" ];then
  echo Deleting dbdelete_user: $delete_user
  mysql -e "DROP user IF EXISTS '$delete_user'@'%'"
  mysql -e "DROP user IF EXISTS '$delete_user'@'localhost'"
  # exit 0
fi

if [ -n "$create_db" ] ; then
  #echo first argument is $create_db
echo "Creating:"
  echo Database: $create_db
  if [ -n "$create_user" ]; then
    user=$create_user
  else
    user=$create_db
  fi
  echo User: $user
  if [ -n "$create_pass" ]; then
    pass=$create_pass
  else
    pass=`randpass 20 0`
  fi
  echo Pass: $pass
  echo "INFO: $(date +"%Y%m%d_%H:%m:%S")_$(id -un)|$create_db|$user|$pass" >> /root/dbusers
  echo "mysql -e \"create database if not exists $create_db DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci\"" >> /root/dbusers
  echo "mysql -e \"GRANT ALL PRIVILEGES ON $create_db.* TO '$user'@'%' identified by '$pass'\"" >> /root/dbusers
  #mysql -e "create database if not exists $create_db"
  mysql -e "create database if not exists $create_db DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci"
  mysql -e "GRANT ALL PRIVILEGES ON $create_db.* TO '$user'@'%' identified by '$pass'"
  echo Done.
fi
